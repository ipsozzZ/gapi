// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: fuxi/v1/fuxi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuxiClient is the client API for Fuxi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuxiClient interface {
	// 获取博客首页
	GetIndex(ctx context.Context, in *IndexReq, opts ...grpc.CallOption) (*IndexResp, error)
}

type fuxiClient struct {
	cc grpc.ClientConnInterface
}

func NewFuxiClient(cc grpc.ClientConnInterface) FuxiClient {
	return &fuxiClient{cc}
}

func (c *fuxiClient) GetIndex(ctx context.Context, in *IndexReq, opts ...grpc.CallOption) (*IndexResp, error) {
	out := new(IndexResp)
	err := c.cc.Invoke(ctx, "/api.fuxi.v1.Fuxi/GetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuxiServer is the server API for Fuxi service.
// All implementations must embed UnimplementedFuxiServer
// for forward compatibility
type FuxiServer interface {
	// 获取博客首页
	GetIndex(context.Context, *IndexReq) (*IndexResp, error)
	mustEmbedUnimplementedFuxiServer()
}

// UnimplementedFuxiServer must be embedded to have forward compatible implementations.
type UnimplementedFuxiServer struct {
}

func (UnimplementedFuxiServer) GetIndex(context.Context, *IndexReq) (*IndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedFuxiServer) mustEmbedUnimplementedFuxiServer() {}

// UnsafeFuxiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuxiServer will
// result in compilation errors.
type UnsafeFuxiServer interface {
	mustEmbedUnimplementedFuxiServer()
}

func RegisterFuxiServer(s grpc.ServiceRegistrar, srv FuxiServer) {
	s.RegisterService(&Fuxi_ServiceDesc, srv)
}

func _Fuxi_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuxiServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.fuxi.v1.Fuxi/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuxiServer).GetIndex(ctx, req.(*IndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Fuxi_ServiceDesc is the grpc.ServiceDesc for Fuxi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fuxi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.fuxi.v1.Fuxi",
	HandlerType: (*FuxiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndex",
			Handler:    _Fuxi_GetIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuxi/v1/fuxi.proto",
}
