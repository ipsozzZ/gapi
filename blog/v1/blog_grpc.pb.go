// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: blog/v1/blog.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogService_UserDetail_FullMethodName       = "/blog.v1.BlogService/UserDetail"
	BlogService_SaveUser_FullMethodName         = "/blog.v1.BlogService/SaveUser"
	BlogService_ChangeUserState_FullMethodName  = "/blog.v1.BlogService/ChangeUserState"
	BlogService_ListUser_FullMethodName         = "/blog.v1.BlogService/ListUser"
	BlogService_SaveSystemConfig_FullMethodName = "/blog.v1.BlogService/SaveSystemConfig"
	BlogService_GetSystemConfig_FullMethodName  = "/blog.v1.BlogService/GetSystemConfig"
	BlogService_ListArticle_FullMethodName      = "/blog.v1.BlogService/ListArticle"
	BlogService_SaveArticle_FullMethodName      = "/blog.v1.BlogService/SaveArticle"
	BlogService_DeleteArticle_FullMethodName    = "/blog.v1.BlogService/DeleteArticle"
	BlogService_ArticleDetail_FullMethodName    = "/blog.v1.BlogService/ArticleDetail"
	BlogService_LikeArticle_FullMethodName      = "/blog.v1.BlogService/LikeArticle"
	BlogService_HitsArticle_FullMethodName      = "/blog.v1.BlogService/HitsArticle"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	// user相关api
	UserDetail(ctx context.Context, in *ReqUserDetail, opts ...grpc.CallOption) (*RespUserDetail, error)
	SaveUser(ctx context.Context, in *ReqSaveUser, opts ...grpc.CallOption) (*RespSaveUser, error)
	ChangeUserState(ctx context.Context, in *ReqChangeUserState, opts ...grpc.CallOption) (*RespChangeUserState, error)
	ListUser(ctx context.Context, in *ReqListUser, opts ...grpc.CallOption) (*RespListUser, error)
	// gconfig相关api
	SaveSystemConfig(ctx context.Context, in *ReqSaveSystemConfig, opts ...grpc.CallOption) (*RespSaveSystemConfig, error)
	GetSystemConfig(ctx context.Context, in *ReqGetSystemConfig, opts ...grpc.CallOption) (*RespGetSystemConfig, error)
	// 文章相关api
	ListArticle(ctx context.Context, in *ReqListArticle, opts ...grpc.CallOption) (*RespListArticle, error)
	SaveArticle(ctx context.Context, in *ReqSaveArticle, opts ...grpc.CallOption) (*RespSaveArticle, error)
	DeleteArticle(ctx context.Context, in *ReqDeleteArticle, opts ...grpc.CallOption) (*RespDeleteArticle, error)
	ArticleDetail(ctx context.Context, in *ReqArticleDetail, opts ...grpc.CallOption) (*RespArticleDetail, error)
	LikeArticle(ctx context.Context, in *ReqLikeArticle, opts ...grpc.CallOption) (*RespLikeArticle, error)
	HitsArticle(ctx context.Context, in *ReqHitsArticle, opts ...grpc.CallOption) (*RespHitsArticle, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) UserDetail(ctx context.Context, in *ReqUserDetail, opts ...grpc.CallOption) (*RespUserDetail, error) {
	out := new(RespUserDetail)
	err := c.cc.Invoke(ctx, BlogService_UserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) SaveUser(ctx context.Context, in *ReqSaveUser, opts ...grpc.CallOption) (*RespSaveUser, error) {
	out := new(RespSaveUser)
	err := c.cc.Invoke(ctx, BlogService_SaveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ChangeUserState(ctx context.Context, in *ReqChangeUserState, opts ...grpc.CallOption) (*RespChangeUserState, error) {
	out := new(RespChangeUserState)
	err := c.cc.Invoke(ctx, BlogService_ChangeUserState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListUser(ctx context.Context, in *ReqListUser, opts ...grpc.CallOption) (*RespListUser, error) {
	out := new(RespListUser)
	err := c.cc.Invoke(ctx, BlogService_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) SaveSystemConfig(ctx context.Context, in *ReqSaveSystemConfig, opts ...grpc.CallOption) (*RespSaveSystemConfig, error) {
	out := new(RespSaveSystemConfig)
	err := c.cc.Invoke(ctx, BlogService_SaveSystemConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetSystemConfig(ctx context.Context, in *ReqGetSystemConfig, opts ...grpc.CallOption) (*RespGetSystemConfig, error) {
	out := new(RespGetSystemConfig)
	err := c.cc.Invoke(ctx, BlogService_GetSystemConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListArticle(ctx context.Context, in *ReqListArticle, opts ...grpc.CallOption) (*RespListArticle, error) {
	out := new(RespListArticle)
	err := c.cc.Invoke(ctx, BlogService_ListArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) SaveArticle(ctx context.Context, in *ReqSaveArticle, opts ...grpc.CallOption) (*RespSaveArticle, error) {
	out := new(RespSaveArticle)
	err := c.cc.Invoke(ctx, BlogService_SaveArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteArticle(ctx context.Context, in *ReqDeleteArticle, opts ...grpc.CallOption) (*RespDeleteArticle, error) {
	out := new(RespDeleteArticle)
	err := c.cc.Invoke(ctx, BlogService_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ArticleDetail(ctx context.Context, in *ReqArticleDetail, opts ...grpc.CallOption) (*RespArticleDetail, error) {
	out := new(RespArticleDetail)
	err := c.cc.Invoke(ctx, BlogService_ArticleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) LikeArticle(ctx context.Context, in *ReqLikeArticle, opts ...grpc.CallOption) (*RespLikeArticle, error) {
	out := new(RespLikeArticle)
	err := c.cc.Invoke(ctx, BlogService_LikeArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) HitsArticle(ctx context.Context, in *ReqHitsArticle, opts ...grpc.CallOption) (*RespHitsArticle, error) {
	out := new(RespHitsArticle)
	err := c.cc.Invoke(ctx, BlogService_HitsArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	// user相关api
	UserDetail(context.Context, *ReqUserDetail) (*RespUserDetail, error)
	SaveUser(context.Context, *ReqSaveUser) (*RespSaveUser, error)
	ChangeUserState(context.Context, *ReqChangeUserState) (*RespChangeUserState, error)
	ListUser(context.Context, *ReqListUser) (*RespListUser, error)
	// gconfig相关api
	SaveSystemConfig(context.Context, *ReqSaveSystemConfig) (*RespSaveSystemConfig, error)
	GetSystemConfig(context.Context, *ReqGetSystemConfig) (*RespGetSystemConfig, error)
	// 文章相关api
	ListArticle(context.Context, *ReqListArticle) (*RespListArticle, error)
	SaveArticle(context.Context, *ReqSaveArticle) (*RespSaveArticle, error)
	DeleteArticle(context.Context, *ReqDeleteArticle) (*RespDeleteArticle, error)
	ArticleDetail(context.Context, *ReqArticleDetail) (*RespArticleDetail, error)
	LikeArticle(context.Context, *ReqLikeArticle) (*RespLikeArticle, error)
	HitsArticle(context.Context, *ReqHitsArticle) (*RespHitsArticle, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) UserDetail(context.Context, *ReqUserDetail) (*RespUserDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetail not implemented")
}
func (UnimplementedBlogServiceServer) SaveUser(context.Context, *ReqSaveUser) (*RespSaveUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedBlogServiceServer) ChangeUserState(context.Context, *ReqChangeUserState) (*RespChangeUserState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserState not implemented")
}
func (UnimplementedBlogServiceServer) ListUser(context.Context, *ReqListUser) (*RespListUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedBlogServiceServer) SaveSystemConfig(context.Context, *ReqSaveSystemConfig) (*RespSaveSystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSystemConfig not implemented")
}
func (UnimplementedBlogServiceServer) GetSystemConfig(context.Context, *ReqGetSystemConfig) (*RespGetSystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedBlogServiceServer) ListArticle(context.Context, *ReqListArticle) (*RespListArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticle not implemented")
}
func (UnimplementedBlogServiceServer) SaveArticle(context.Context, *ReqSaveArticle) (*RespSaveArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticle not implemented")
}
func (UnimplementedBlogServiceServer) DeleteArticle(context.Context, *ReqDeleteArticle) (*RespDeleteArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedBlogServiceServer) ArticleDetail(context.Context, *ReqArticleDetail) (*RespArticleDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDetail not implemented")
}
func (UnimplementedBlogServiceServer) LikeArticle(context.Context, *ReqLikeArticle) (*RespLikeArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticle not implemented")
}
func (UnimplementedBlogServiceServer) HitsArticle(context.Context, *ReqHitsArticle) (*RespHitsArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitsArticle not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_UserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_UserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UserDetail(ctx, req.(*ReqUserDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SaveUser(ctx, req.(*ReqSaveUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ChangeUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeUserState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ChangeUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ChangeUserState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ChangeUserState(ctx, req.(*ReqChangeUserState))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqListUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListUser(ctx, req.(*ReqListUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_SaveSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveSystemConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SaveSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_SaveSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SaveSystemConfig(ctx, req.(*ReqSaveSystemConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSystemConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetSystemConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetSystemConfig(ctx, req.(*ReqGetSystemConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqListArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ListArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListArticle(ctx, req.(*ReqListArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_SaveArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SaveArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_SaveArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SaveArticle(ctx, req.(*ReqSaveArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteArticle(ctx, req.(*ReqDeleteArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ArticleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqArticleDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ArticleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ArticleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ArticleDetail(ctx, req.(*ReqArticleDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_LikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLikeArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).LikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_LikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).LikeArticle(ctx, req.(*ReqLikeArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_HitsArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHitsArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).HitsArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_HitsArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).HitsArticle(ctx, req.(*ReqHitsArticle))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.v1.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserDetail",
			Handler:    _BlogService_UserDetail_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _BlogService_SaveUser_Handler,
		},
		{
			MethodName: "ChangeUserState",
			Handler:    _BlogService_ChangeUserState_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _BlogService_ListUser_Handler,
		},
		{
			MethodName: "SaveSystemConfig",
			Handler:    _BlogService_SaveSystemConfig_Handler,
		},
		{
			MethodName: "GetSystemConfig",
			Handler:    _BlogService_GetSystemConfig_Handler,
		},
		{
			MethodName: "ListArticle",
			Handler:    _BlogService_ListArticle_Handler,
		},
		{
			MethodName: "SaveArticle",
			Handler:    _BlogService_SaveArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _BlogService_DeleteArticle_Handler,
		},
		{
			MethodName: "ArticleDetail",
			Handler:    _BlogService_ArticleDetail_Handler,
		},
		{
			MethodName: "LikeArticle",
			Handler:    _BlogService_LikeArticle_Handler,
		},
		{
			MethodName: "HitsArticle",
			Handler:    _BlogService_HitsArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/v1/blog.proto",
}
