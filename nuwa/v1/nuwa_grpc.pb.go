// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: nuwa/v1/nuwa.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NuwaService_Login_FullMethodName          = "/nuwa.api.v1.NuwaService/Login"
	NuwaService_Logout_FullMethodName         = "/nuwa.api.v1.NuwaService/Logout"
	NuwaService_GetUserSession_FullMethodName = "/nuwa.api.v1.NuwaService/GetUserSession"
)

// NuwaServiceClient is the client API for NuwaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NuwaServiceClient interface {
	// 登入、登出
	Login(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RespUserLogin, error)
	Logout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*RespUserLogout, error)
	// 获取已登录玩家数据（用于鉴权等）
	GetUserSession(ctx context.Context, in *ReqUserSession, opts ...grpc.CallOption) (*RespUserSession, error)
}

type nuwaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNuwaServiceClient(cc grpc.ClientConnInterface) NuwaServiceClient {
	return &nuwaServiceClient{cc}
}

func (c *nuwaServiceClient) Login(ctx context.Context, in *ReqUserLogin, opts ...grpc.CallOption) (*RespUserLogin, error) {
	out := new(RespUserLogin)
	err := c.cc.Invoke(ctx, NuwaService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuwaServiceClient) Logout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*RespUserLogout, error) {
	out := new(RespUserLogout)
	err := c.cc.Invoke(ctx, NuwaService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuwaServiceClient) GetUserSession(ctx context.Context, in *ReqUserSession, opts ...grpc.CallOption) (*RespUserSession, error) {
	out := new(RespUserSession)
	err := c.cc.Invoke(ctx, NuwaService_GetUserSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NuwaServiceServer is the server API for NuwaService service.
// All implementations must embed UnimplementedNuwaServiceServer
// for forward compatibility
type NuwaServiceServer interface {
	// 登入、登出
	Login(context.Context, *ReqUserLogin) (*RespUserLogin, error)
	Logout(context.Context, *ReqUserLogout) (*RespUserLogout, error)
	// 获取已登录玩家数据（用于鉴权等）
	GetUserSession(context.Context, *ReqUserSession) (*RespUserSession, error)
	mustEmbedUnimplementedNuwaServiceServer()
}

// UnimplementedNuwaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNuwaServiceServer struct {
}

func (UnimplementedNuwaServiceServer) Login(context.Context, *ReqUserLogin) (*RespUserLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedNuwaServiceServer) Logout(context.Context, *ReqUserLogout) (*RespUserLogout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedNuwaServiceServer) GetUserSession(context.Context, *ReqUserSession) (*RespUserSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (UnimplementedNuwaServiceServer) mustEmbedUnimplementedNuwaServiceServer() {}

// UnsafeNuwaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NuwaServiceServer will
// result in compilation errors.
type UnsafeNuwaServiceServer interface {
	mustEmbedUnimplementedNuwaServiceServer()
}

func RegisterNuwaServiceServer(s grpc.ServiceRegistrar, srv NuwaServiceServer) {
	s.RegisterService(&NuwaService_ServiceDesc, srv)
}

func _NuwaService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuwaServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuwaService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuwaServiceServer).Login(ctx, req.(*ReqUserLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuwaService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuwaServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuwaService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuwaServiceServer).Logout(ctx, req.(*ReqUserLogout))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuwaService_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuwaServiceServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuwaService_GetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuwaServiceServer).GetUserSession(ctx, req.(*ReqUserSession))
	}
	return interceptor(ctx, in, info, handler)
}

// NuwaService_ServiceDesc is the grpc.ServiceDesc for NuwaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NuwaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nuwa.api.v1.NuwaService",
	HandlerType: (*NuwaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _NuwaService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _NuwaService_Logout_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _NuwaService_GetUserSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuwa/v1/nuwa.proto",
}
