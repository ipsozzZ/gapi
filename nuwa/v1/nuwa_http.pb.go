// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.1
// source: nuwa/v1/nuwa.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNuwaServiceGetUserSession = "/nuwa.api.v1.NuwaService/GetUserSession"
const OperationNuwaServiceLogin = "/nuwa.api.v1.NuwaService/Login"
const OperationNuwaServiceLogout = "/nuwa.api.v1.NuwaService/Logout"

type NuwaServiceHTTPServer interface {
	// GetUserSession 获取已登录玩家数据（用于鉴权等）
	GetUserSession(context.Context, *ReqUserSession) (*RespUserSession, error)
	// Login 登入、登出
	Login(context.Context, *ReqUserLogin) (*RespUserLogin, error)
	Logout(context.Context, *ReqUserLogout) (*RespUserLogout, error)
}

func RegisterNuwaServiceHTTPServer(s *http.Server, srv NuwaServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/login", _NuwaService_Login0_HTTP_Handler(srv))
	r.POST("/logout", _NuwaService_Logout0_HTTP_Handler(srv))
	r.POST("/session", _NuwaService_GetUserSession0_HTTP_Handler(srv))
}

func _NuwaService_Login0_HTTP_Handler(srv NuwaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqUserLogin
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNuwaServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*ReqUserLogin))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespUserLogin)
		return ctx.Result(200, reply)
	}
}

func _NuwaService_Logout0_HTTP_Handler(srv NuwaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqUserLogout
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNuwaServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*ReqUserLogout))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespUserLogout)
		return ctx.Result(200, reply)
	}
}

func _NuwaService_GetUserSession0_HTTP_Handler(srv NuwaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReqUserSession
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNuwaServiceGetUserSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserSession(ctx, req.(*ReqUserSession))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RespUserSession)
		return ctx.Result(200, reply)
	}
}

type NuwaServiceHTTPClient interface {
	GetUserSession(ctx context.Context, req *ReqUserSession, opts ...http.CallOption) (rsp *RespUserSession, err error)
	Login(ctx context.Context, req *ReqUserLogin, opts ...http.CallOption) (rsp *RespUserLogin, err error)
	Logout(ctx context.Context, req *ReqUserLogout, opts ...http.CallOption) (rsp *RespUserLogout, err error)
}

type NuwaServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNuwaServiceHTTPClient(client *http.Client) NuwaServiceHTTPClient {
	return &NuwaServiceHTTPClientImpl{client}
}

func (c *NuwaServiceHTTPClientImpl) GetUserSession(ctx context.Context, in *ReqUserSession, opts ...http.CallOption) (*RespUserSession, error) {
	var out RespUserSession
	pattern := "/session"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNuwaServiceGetUserSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NuwaServiceHTTPClientImpl) Login(ctx context.Context, in *ReqUserLogin, opts ...http.CallOption) (*RespUserLogin, error) {
	var out RespUserLogin
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNuwaServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NuwaServiceHTTPClientImpl) Logout(ctx context.Context, in *ReqUserLogout, opts ...http.CallOption) (*RespUserLogout, error) {
	var out RespUserLogout
	pattern := "/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNuwaServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
