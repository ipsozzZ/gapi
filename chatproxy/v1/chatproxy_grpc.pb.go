// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: chatproxy/v1/chatproxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatProxy_SayMessage_FullMethodName   = "/chatproxy.v1.ChatProxy/SayMessage"
	ChatProxy_WsSayMessage_FullMethodName = "/chatproxy.v1.ChatProxy/WsSayMessage"
)

// ChatProxyClient is the client API for ChatProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatProxyClient interface {
	// 发送一个文本给gpt
	SayMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	// 发送一个文本到聊天室
	WsSayMessage(ctx context.Context, in *WsChatRequest, opts ...grpc.CallOption) (*WsChatReply, error)
}

type chatProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewChatProxyClient(cc grpc.ClientConnInterface) ChatProxyClient {
	return &chatProxyClient{cc}
}

func (c *chatProxyClient) SayMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, ChatProxy_SayMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatProxyClient) WsSayMessage(ctx context.Context, in *WsChatRequest, opts ...grpc.CallOption) (*WsChatReply, error) {
	out := new(WsChatReply)
	err := c.cc.Invoke(ctx, ChatProxy_WsSayMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatProxyServer is the server API for ChatProxy service.
// All implementations must embed UnimplementedChatProxyServer
// for forward compatibility
type ChatProxyServer interface {
	// 发送一个文本给gpt
	SayMessage(context.Context, *ChatRequest) (*ChatReply, error)
	// 发送一个文本到聊天室
	WsSayMessage(context.Context, *WsChatRequest) (*WsChatReply, error)
	mustEmbedUnimplementedChatProxyServer()
}

// UnimplementedChatProxyServer must be embedded to have forward compatible implementations.
type UnimplementedChatProxyServer struct {
}

func (UnimplementedChatProxyServer) SayMessage(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayMessage not implemented")
}
func (UnimplementedChatProxyServer) WsSayMessage(context.Context, *WsChatRequest) (*WsChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WsSayMessage not implemented")
}
func (UnimplementedChatProxyServer) mustEmbedUnimplementedChatProxyServer() {}

// UnsafeChatProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatProxyServer will
// result in compilation errors.
type UnsafeChatProxyServer interface {
	mustEmbedUnimplementedChatProxyServer()
}

func RegisterChatProxyServer(s grpc.ServiceRegistrar, srv ChatProxyServer) {
	s.RegisterService(&ChatProxy_ServiceDesc, srv)
}

func _ChatProxy_SayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatProxyServer).SayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatProxy_SayMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatProxyServer).SayMessage(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatProxy_WsSayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WsChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatProxyServer).WsSayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatProxy_WsSayMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatProxyServer).WsSayMessage(ctx, req.(*WsChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatProxy_ServiceDesc is the grpc.ServiceDesc for ChatProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatproxy.v1.ChatProxy",
	HandlerType: (*ChatProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayMessage",
			Handler:    _ChatProxy_SayMessage_Handler,
		},
		{
			MethodName: "WsSayMessage",
			Handler:    _ChatProxy_WsSayMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatproxy/v1/chatproxy.proto",
}
